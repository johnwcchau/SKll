{
    "name": "kaggle_breast_cancer",
    "_pytype": "skll.baseblock.Parent",
    "_jstype": "skll.baseblock.Parent",
    "disable_mask": [],
    "column_mask": [],
    "as_new_rows": false,
    "_children": {
        "0": {
            "_pytype": "skll.baseblock.Placeholder",
            "_jstype": "skll.baseblock.Placeholder",
            "comment": "###Breast cancer example\n- This is a simple demonstration of SK-ll pipeline\n- Using dataset from [https://www.kaggle.com/yasserh/breast-cancer-dataset]"
        },
        "1": {
            "name": "Input",
            "_pytype": "skll.plugin.tabular.tabular.FileInput",
            "_jstype": "skll.plugin.tabular.FileInput",
            "disable_mask": [
                "run"
            ],
            "as_new_rows": false,
            "filename": "/examples/kaggle_breast_cancer.csv"
        },
        "2": {
            "_pytype": "skll.baseblock.Placeholder",
            "_jstype": "skll.baseblock.Placeholder",
            "comment": "###Workflow:\n1. One hot encoding all category columns\n2. Seperate ID and target column from main dataset\n3. Drop unused columns\n4. Perform training with XGBoost"
        },
        "3": {
            "name": "OneHotEncoder-8945",
            "_pytype": "skll.plugin.sklearn.block.SklClass",
            "_jstype": "sklearn.preprocessing.OneHotEncoder",
            "disable_mask": [],
            "column_mask": [
                "diagnosis"
            ],
            "as_new_rows": false,
            "cls": "sklearn.preprocessing.OneHotEncoder",
            "trainmethod": "fit_transform",
            "testmethod": "transform",
            "initargs": [],
            "initkargs": {
                "drop": "first"
            }
        },
        "4": {
            "name": "Extract Y/ID Column-3af8",
            "_pytype": "skll.plugin.tabular.tabular.XyidSplit",
            "_jstype": "skll.plugin.tabular.XyidSplit",
            "disable_mask": [],
            "column_mask": [],
            "as_new_rows": false,
            "ycol": "diagnosis",
            "idcol": "id"
        },
        "5": {
            "name": "MinMaxScaler-de35",
            "_pytype": "skll.plugin.sklearn.block.SklClass",
            "_jstype": "sklearn.preprocessing.MinMaxScaler",
            "disable_mask": [],
            "as_new_rows": false,
            "cls": "sklearn.preprocessing.MinMaxScaler",
            "trainmethod": "fit_transform",
            "testmethod": "transform",
            "initargs": [],
            "initkargs": {}
        },
        "6": {
            "name": "Drop-46d5",
            "_pytype": "skll.plugin.tabular.tabular.Drop",
            "_jstype": "skll.plugin.tabular.Drop",
            "disable_mask": [],
            "column_mask": [
                "fractal_dimension_mean",
                "texture_se",
                "smoothness_se",
                "symmetry_se",
                "fractal_dimension_se"
            ],
            "as_new_columns": false,
            "as_new_rows": false
        },
        "7": {
            "_pytype": "skll.baseblock.Placeholder",
            "_jstype": "skll.baseblock.Placeholder",
            "comment": "Note: _KFold block will only fold data in __Test__ mode and pass through in other modes_"
        },
        "8": {
            "name": "KFold-2175",
            "_pytype": "skll.plugin.sklearn.block.SklSplitter",
            "_jstype": "sklearn.model_selection.KFold",
            "disable_mask": [],
            "as_new_rows": false,
            "output_type": "last",
            "cls": "sklearn.model_selection.KFold",
            "initargs": [],
            "initkargs": {},
            "_children": {
                "0": {
                    "name": "XGBClassifier-51b9",
                    "_pytype": "skll.plugin.sklearn.block.SklClass",
                    "_jstype": "xgboost.XGBClassifier",
                    "disable_mask": [],
                    "as_new_rows": false,
                    "cls": "xgboost.XGBClassifier",
                    "trainmethod": "fit+test",
                    "testmethod": "predict",
                    "scoremethod": "score",
                    "initargs": [],
                    "initkargs": {}
                },
                "1": {
                    "name": "accuracy_score-1e7c",
                    "_pytype": "skll.plugin.sklearn.block.SklScoringMethod",
                    "_jstype": "sklearn.metrics.accuracy_score",
                    "disable_mask": [],
                    "as_new_rows": false,
                    "method": "sklearn.metrics.accuracy_score",
                    "xname": "y_pred",
                    "yname": "y_true",
                    "args": [],
                    "kargs": {
                        "y_pred": null,
                        "y_true": null
                    }
                }
            }
        },
        "9": {
            "_pytype": "skll.baseblock.Placeholder",
            "_jstype": "skll.baseblock.Placeholder",
            "comment": "_After model building, click on the __Publish__ button to output the trained model, which can then be deploy in production system._"
        }
    }
}